{
	"info": {
		"_postman_id": "47ef789d-b068-4043-8e6e-f5822fb5ac94",
		"name": "Constellation-Regulatory-APIs-Dev2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48172299",
		"_collection_link": "https://zulminan-ahmed-ed689875-5510487.postman.co/workspace/zulminan-ahmed-ed689875's-Works~cbd811db-641d-4d5e-8e1a-4646ebad23b9/collection/48172299-47ef789d-b068-4043-8e6e-f5822fb5ac94?action=share&source=collection_link&creator=48172299"
	},
	"item": [
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Login API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Generating the Access Token\");\r",
									"\r",
									"var token = pm.response.text();\r",
									"\r",
									"token = token.replace(/\"/g, \"\");\r",
									"\r",
									"token = \"UDSLongToken \"+token;\r",
									"\r",
									"pm.environment.set(\"ACCESS_TOKEN\",token);\r",
									"\r",
									"console.log(\"Access Token Is:\");\r",
									"\r",
									"console.log(token);\r",
									"\r",
									"pm.test(\"Verify if the status code is 200\",function()\r",
									"{\r",
									"    pm.expect(pm.response.to.have.status(200));\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"username\":\"admin@Constellation.dev\",\n\"password\":\"P@sswordW6C\"\n \n \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/home-security/api/security/v2/sessions/fromusermodel/no",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"home-security",
								"api",
								"security",
								"v2",
								"sessions",
								"fromusermodel",
								"no"
							]
						},
						"description": "Generated from cURL: curl --location --request POST 'https://dev2.onesourcetax.com/dev2/home-security/api/security/v2/sessions/fromusermodel/no' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n\"username\":\"admin@Constellation.dev\",\n\"password\":\"P@sswordW6C\"\n \n \n}'"
					},
					"response": []
				},
				{
					"name": "Get Regulatory Updates Year & Month View (Positive Tests)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Positive testcases for Get Regulatory Updates Year & Month View\");\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									" \r",
									"pm.test(\"Response should not be empty\", function () {\r",
									"    pm.expect(jsonData.length || Object.keys(jsonData).length).to.be.above(0);\r",
									"});\r",
									" \r",
									"if (Array.isArray(jsonData)) {\r",
									"    pm.test(\"Each object contains mandatory fields\", function () {\r",
									"        jsonData.forEach(item => {\r",
									"            pm.expect(item).to.have.property(\"id\");\r",
									"            pm.expect(item).to.have.property(\"dateAdded\");\r",
									"            pm.expect(item).to.have.property(\"effectiveDate\");\r",
									"            pm.expect(item).to.have.property(\"jurisdiction\");\r",
									"            pm.expect(item).to.have.property(\"title\");\r",
									"        });\r",
									"    });\r",
									"} \r",
									"\r",
									"else \r",
									"{\r",
									"    pm.test(\"Yearly response has year objects\", function () {\r",
									"        Object.keys(jsonData).forEach(year => {\r",
									"            pm.expect(jsonData[year]).to.be.an(\"object\");\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{ACCESS_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=2025,2026",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "2025,2026",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Get Regulatory Updates Year & Month View (Negative Test year Param Missing)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Negative Test For Get Regulatory Updates Year & Month View validating if year Param is missing\");\r",
									"\r",
									"var yearParam = pm.request.url.query.find(q => q.key === \"year\");\r",
									"var yearValue = yearParam ? yearParam.value : null;\r",
									"\r",
									"pm.test(\"Year param missing should return error\", function () {\r",
									"if (yearValue=== null) {\r",
									"        pm.expect(pm.response.code, \"Expected 400 when year param missing\")\r",
									"          .to.be.eql(400);\r",
									"    } else {\r",
									"        pm.expect.fail(\"This test expected MISSING year param, but got: [\" + yearValue + \"]\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{ACCESS_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Regulatory Updates Year & Month View (Negative Test Year Not 4 Digits e.g:, 202, 12345)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Negative Test For Get Regulatory Updates Year & Month View validating if Year Not 4 Digits e.g:202, 12345\");\r",
									"\r",
									"var yearParam = pm.request.url.query.find(q => q.key === \"year\");\r",
									"var yearValue = yearParam ? yearParam.value : null;\r",
									"\r",
									"pm.test(\"Year not 4 digits should return error\", function () {\r",
									"    if (yearValue && /^\\d+$/.test(yearValue) && yearValue.length !== 4) {\r",
									"        pm.expect(pm.response.code, \"Expected 400 when year is not 4 digits\")\r",
									"          .to.be.eql(400);\r",
									"    } else {\r",
									"        pm.expect.fail(\"This test expected year with INVALID LENGTH, but got: [\" + yearValue + \"]\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{ACCESS_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=12345",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "12345",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Regulatory Updates Year & Month View (Security Test Missing Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Security Test For Get Regulatory Updates Year & Month View test Missing Access Token\");\r",
									"\r",
									"pm.test(\"Missing Access token should return 401 Status Code\",function()\r",
									"{\r",
									"    pm.expect(pm.response.to.have.status(401));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the code in the response field has a message 'UNAUTHORIZED'\",function()\r",
									"{\r",
									"    pm.expect(pm.response.json().error.code).to.be.eql(\"UNAUTHORIZED\");\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Verify the missing token error message\",function()\r",
									"{\r",
									"    pm.expect(pm.response.json().error.message).to.be.eql(\"INVALID_AUTHENTICATION: Invalid Authorization header value.\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=2025,2026",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "2025,2026",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Security Tests",
			"item": [
				{
					"name": "Get Regulatory Updates Year & Month View (Security Test Wrong Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Security Test For Get Regulatory Updates Year & Month View test with Wrong Access Token\");\r",
									"\r",
									"pm.test(\"Invalid Access token should return 401 Status Code\",function()\r",
									"{\r",
									"    pm.expect(pm.response.to.have.status(401));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the code in the response field has a message 'UNAUTHORIZED'\",function()\r",
									"{\r",
									"    pm.expect(pm.response.json().error.code).to.be.eql(\"UNAUTHORIZED\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the invalid token error message\",function()\r",
									"{\r",
									"    pm.expect(pm.response.json().error.message).to.be.eql(\"INVALID_AUTHENTICATION: Token was invalidated by the server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "UDSLongToken DEV2-Chi_VG8cx_6RX1_nf-poO241jF3q8JiySTORrbyzzztvmuIxNODLRwsyXg6s73eS",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=2025,2026",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "2025,2026",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Regulatory Updates Year & Month View (Security Test Expired Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Security Test For Get Regulatory Updates Year & Month View test with Expired Access Token\");\r",
									"\r",
									"pm.test(\"Expired Access token should return 401 Status Code\",function()\r",
									"{\r",
									"    pm.expect(pm.response.to.have.status(401));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the code in the response field has a message 'UNAUTHORIZED'\",function()\r",
									"{\r",
									"    pm.expect(pm.response.json().error.code).to.be.eql(\"UNAUTHORIZED\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the expired access token error message\",function()\r",
									"{\r",
									"    pm.expect(pm.response.json().error.message).to.be.eql(\"INVALID_AUTHENTICATION: Token was invalidated by the server\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "UDSLongToken DEV2--4vRfEBZGfTpgo3bQjh1Dpn2oMbL2Gjtk0I_Muo8LqgYeLhiosm-Qz4SjNh8HvrW",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=2025,2026",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "2025,2026",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Boundry Tests",
			"item": [
				{
					"name": "Get Regulatory Updates Year & Month View (Boundary Test Single Year Request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Boundary Test For Get Regulatory Updates Year & Month View Single Year Request\");\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status code is 200\",function()\r",
									"{\r",
									"    pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test(\"Response is an array\", function () {\r",
									"        pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									" \r",
									"pm.test(\"Each object contains required fields\", function () {\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"dateAdded\");\r",
									"        pm.expect(item).to.have.property(\"effectiveDate\");\r",
									"        pm.expect(item).to.have.property(\"jurisdiction\");\r",
									"        pm.expect(item).to.have.property(\"title\");\r",
									"    });\r",
									"});\r",
									" \r",
									"pm.test(\"All items belong to requested year 2025\", function () {\r",
									"    jsonData.forEach(item => {\r",
									"        let year = new Date(item.effectiveDate).getFullYear();\r",
									"        pm.expect(year).to.eql(2025);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{ACCESS_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=2025",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "2025",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Regulatory Updates Year & Month View (Boundary Test Large Year Range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Boundary Test For Get Regulatory Updates Year & Month View Large Year Range\");\r",
									"\r",
									"pm.test(\"Verify the status code is 200\",function()\r",
									"{\r",
									"    pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"pm.test(\"All requested past/current years should be returned in response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var yearParam = requestUrl.split(\"year=\")[1];\r",
									"    var requestedYears = yearParam.split(\",\").map(y => y.trim());\r",
									"    var years = jsonData.map(item => new Date(item.dateAdded).getFullYear().toString());\r",
									"    var uniqueYears = [...new Set(years)];\r",
									"    var currentYear = new Date().getFullYear();\r",
									" \r",
									"    console.log(\"Requested years:\", requestedYears);\r",
									"    console.log(\"Unique years in response:\", uniqueYears);\r",
									"    console.log(\"Current year (max allowed):\", currentYear);\r",
									"\r",
									"    requestedYears.forEach(year => {\r",
									"        if (parseInt(year) <= currentYear) {\r",
									"            pm.expect(uniqueYears).to.include(year, `Year ${year} is missing in response`);\r",
									"        } else {\r",
									"            console.log(`Skipping future year check for: ${year}`);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{ACCESS_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=2022,2023,2024,2025,2026",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "2022,2023,2024,2025,2026",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Regulatory Updates Year & Month View (Boundary Test Lower Boundary)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Boundary Test For Get Regulatory Updates Year & Month View test Lower Boundary\");\r",
									"\r",
									"var yearParam = pm.request.url.query.find(q => q.key === \"year\");\r",
									"var yearValue = yearParam ? yearParam.value : null;\r",
									" \r",
									"console.log(\"Extracted year param value => [\" + yearValue + \"]\");\r",
									" \r",
									"pm.test(\"Year at lower boundary (2018) should be valid\", function () {\r",
									"    if (yearValue === \"2018\") {\r",
									"        pm.expect(pm.response.code, \"Expected 200 for year=2018\").to.eql(200);\r",
									"    } else {\r",
									"        pm.expect.fail(\"❌ This test expected year=2018, but got: [\" + yearValue + \"]\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{ACCESS_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=2018",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "2018",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Performance Tests",
			"item": [
				{
					"name": "Get Regulatory Updates Year & Month View (Performance Test Response Time Threshold)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Performance Test For Get Regulatory Updates Year & Month View Response Time Threshold\");\r",
									"\r",
									"pm.test(\"Verify the status code is 200\",function()\r",
									"{\r",
									"    pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is under 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{ACCESS_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=2025,2026",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "2025,2026",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Regulatory Updates Year & Month View (Performance Test Large Payload Handling)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running Performance Test For Get Regulatory Updates Year & Month View Large Payload Handling\");\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify the status code is 200\",function()\r",
									"{\r",
									"    pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"pm.test(\"Large payload returns valid JSON array\", function () {\r",
									"    \r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.length).to.be.above(0);\r",
									"});\r",
									" \r",
									"pm.test(\"All items in large payload have required fields\", function () {\r",
									"    \r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item).to.have.property(\"id\");\r",
									"        pm.expect(item).to.have.property(\"dateAdded\");\r",
									"        pm.expect(item).to.have.property(\"effectiveDate\");\r",
									"        pm.expect(item).to.have.property(\"jurisdiction\");\r",
									"        pm.expect(item).to.have.property(\"title\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{ACCESS_TOKEN}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/constellation-ui/api/v1/regulatory-updates/year-view?view=your&forecast=multi-year&year=2025,2026",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"constellation-ui",
								"api",
								"v1",
								"regulatory-updates",
								"year-view"
							],
							"query": [
								{
									"key": "view",
									"value": "your",
									"description": "Defines the view type"
								},
								{
									"key": "forecast",
									"value": "multi-year",
									"description": "Types of forecast (multi-year/yearly)"
								},
								{
									"key": "year",
									"value": "2025,2026",
									"description": "Comma-separated list of years"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Functional Tests",
			"item": []
		},
		{
			"name": "Schema Validation Test",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}